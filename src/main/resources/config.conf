messages {
    # Output for command execution. Includes command-specific errors.
    commands {
        # All output for /credits
        credits {
            # Sender prompt for /credits menu config.
            menuEditingPrompt="<red>Enter the new value for <gray><setting>, or type 'cancel' to abort."
            # Sender prompt for /credits menu redeem prompt.
            menuRedeemPrompt="<gray>How many credits would you like to redeem into <green><skill>? <gray>You have <green><target_credits> Credits available."
            # Sender output for /credits balance <target>.
            otherBalance="<green><target> has <target_credits> MCMMO Credits."
            # Sender output for /credits reload.
            reloadSuccessful="<green>The configuration file has been reloaded."
            # Sender output for /credits balance.
            selfBalance="<green>You have <sender_credits> MCMMO Credits!"
            # Sender output for a failed in-game config modification.
            settingChangeFailure="<red>There was an error while changing settings, operation aborted."
            # Sender output for a successful in-game config modification.
            settingChangeSuccessful="<green>You have changed <gray><setting> <green>to <gray><change>."
        }
        # All output for /credits add/set/take <amount>
        modifyCredits {
            # Receiver output for /credits add <amount> <player>. This will not send if --s is used.
            addReceiver="<green><amount> Credits have been added to your balance by <sender>. You now have <target_credits> Credits."
            # Sender output for /credits add <amount>.
            addSender="<green>You have given <amount> Credits to <target>."
            # Receiver output for /credits set <amount> <player>. This will not send if --s is used.
            setReceiver="<yellow>Your MCMMO Credit balance has been set to <amount> by <sender>."
            # Sender output for /credits set <amount>.
            setSender="<yellow>You have set <target>'s Credits to <amount>."
            # Receiver output for /credits take <amount> <player>. This will not send if --s is used.
            takeReceiver="<red>You had <amount> taken out of your Credit balance by <sender>. You now have <target_credits> Credits."
            # Sender output for /credits take <amount>.
            takeSender="<red>You have taken <amount> Credits from <target>."
        }
        # All output for /redeem
        redeem {
            # Sender output for /redeem failure.
            # Sent when user does not have enough credits.
            notEnoughCredits="<red>You do not have enough MCMMO Credits to do this!"
            # Receiver output for successful credit redemption when used on another user.
            # This will not send if --s is used.
            otherRedeemReceiver="<green>Redemption Successful! <sender> has redeemed <amount> Credits into <skill> for you! You have <target_credits> Credits remaining."
            # Sender output for successful credit redemption when used on another user.
            otherRedeemSender="<green>Redemption Successful! You have redeemed <amount> Credits into <skill> for <target>. They have <target_credits> Credits remaining."
            # Sender output for successful credit redemption.
            selfRedeem="<green>Redemption Successful! You have redeemed <amount> Credits into <skill>. You have <target_credits> Credits remaining."
            # Sender output for a failed credit redemption.
            # Sent when skill cap would be exceeded.
            skillCap="<red>You cannot redeem this many MCMMO Credits into <skill>, due to the Level Cap (<cap>)."
        }
    }
    # Sender output for command exceptions.
    exceptions {
        # Sender output for invalid command argument input.
        argumentParsing="<red>Argument Error: <gray><argument_error>"
        # Sender output for general command errors.
        commandExecution="<red>There was an error executing this command!"
        # Sender output for invalid command argument input.
        invalidSender="<red>Invalid command sender! You must be of type: <gray><correct_sender>"
        # Sender output for invalid command argument input.
        invalidSyntax="<red>Invalid syntax! Correct syntax: <gray><correct_syntax>"
        # Sender output for missing permission.
        noPermission="<hover:show_text:'<red>Required permission: <required_permission>'><red>You do not have permission to do this!"
        # Sender output when a player does not exist.
        playerDoesNotExist="<red>This player does not exist in our database!"
    }
    # Output for all other messages.
    general {
        # Output for adding new users to database.
        # Required database-add-message: true.
        addPlayerMessage="<target> has been added to the database!"
        # Sender output for cancelled prompt.
        cancelPrompt="<red>You have cancelled the current modification."
        # Output for player joining.
        # Requires send-login-message: true.
        loginMessage="<hover:show_text:'<green>You have <target_credits> MCMMO Credits!'><yellow>Hover here to see how many MCMMO Credits you have!"
        # Prefix for all plugin messages.
        prefix="<hover:show_text:'<green><sender>: <sender_credits> Credits'><gold><bold>CREDITS</bold> "
    }
}
settings {
    # Toggles console message when a user
    # is added to the MCMMO Credits database
    addPlayerNotification=true
    # Options: sqlite, mysql, json.
    # NOTE: Changing DB type live is not supported. JSON is included as a last resort.
    # JSON will slow as user size increases
    databaseType=sqlite
    # Enables debug
    debug=false
    # Configurable MySQL connection settings
    mysql {
        # Name of Database to load.
        database=database
        # Host address of MySQL database.
        host="127.0.0.1"
        # MySQL Account Password.
        password="passw0rd+"
        # Port for Host address of MySQL database.
        port=3306
        # UseSSL connection property. Should the connection use SSL?
        useSSL=true
        # MySQL Account Username.
        username=root
    }
    # Toggles tab completion for Player/username based arguments.
    # Useful if you have other plugins which hide staff.
    playerTabCompletion=true
    # Toggles sending a login message to the user.
    sendLoginMessage=true
}
